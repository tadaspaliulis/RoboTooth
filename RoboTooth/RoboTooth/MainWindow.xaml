<Window x:Class="RoboTooth.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:RoboTooth"
        mc:Ignorable="d"
        Title="RoboController" Height="460" Width="600"
        xmlns:ViewModel="clr-namespace:RoboTooth.ViewModel"
        xmlns:View="clr-namespace:RoboTooth.View">

    <Window.Resources>
        <Style TargetType="Border" x:Key="HeaderBorderStyle">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Black"/>
        </Style>
        <Style TargetType="Border" x:Key="CellBorderStyle">
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Gray"/>
        </Style>
        <ViewModel:IdColourValueConverter x:Key="IdColourValueConverter"/>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"></ColumnDefinition>
            <ColumnDefinition Width="*"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <StackPanel Grid.Column="0">    
            <TextBlock x:Name="ConnectionStatus" Text="{Binding Path=ConnectionManagement.TextStatus, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" Margin="10,10,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Height="58" Width="117"/>
            <Button x:Name="ConnectionButton" IsEnabled="{Binding ConnectionManagement.ConnectionButton.Enabled, UpdateSourceTrigger=PropertyChanged}" Content="{Binding ConnectionManagement.ConnectionButton.Content, UpdateSourceTrigger=PropertyChanged}" Command="{Binding ConnectionManagement.ConnectionButton.Command}" HorizontalAlignment="Left" Margin="10,73,0,0" VerticalAlignment="Top" Width="75" Height="19"/>
        </StackPanel>

        <StackPanel Grid.Column="1">
            <!-- Received message list view-->
            <ListView  Height="200" Width="300" SelectionMode="Single" HorizontalAlignment="Left" ItemsSource="{Binding Path=RawMessageList, UpdateSourceTrigger=PropertyChanged}">
                <ListView.View>
                    <GridView>
                        <GridViewColumn Header="ID" Width="Auto">
                            <GridViewColumn.CellTemplate>
                                <DataTemplate>
                                    <Grid Margin="-6,0,-6,0" Background="{Binding Id, Converter={StaticResource IdColourValueConverter}}">
                                        <TextBlock Text="{Binding Id}" Margin="6,0,6,0"/>
                                    </Grid>
                                </DataTemplate>
                            </GridViewColumn.CellTemplate>
                        </GridViewColumn>
                        <GridViewColumn Header="Raw Data" DisplayMemberBinding="{Binding RawData}" Width="Auto"/>
                    </GridView>
                </ListView.View>
            </ListView>

            <StackPanel Orientation="Horizontal" Margin="0,4,0,4">
                <Label Content="Distance:"/>
                <TextBox IsReadOnly="True" MinWidth="40" VerticalContentAlignment="Center" Text="{Binding IntDataDisplay.EchoDistanceValue}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,4,0,4">
                <Label Content="X:"/>
                <TextBox IsReadOnly="True" MinWidth="20" VerticalContentAlignment="Center" Text="{Binding IntDataDisplay.MagnetometerOrientationXValue}"/>
                <Label Content="Y:"/>
                <TextBox IsReadOnly="True" MinWidth="20" VerticalContentAlignment="Center" Text="{Binding IntDataDisplay.MagnetometerOrientationYValue}"/>
                <Label Content="Z:"/>
                <TextBox IsReadOnly="True" MinWidth="20" VerticalContentAlignment="Center" Text="{Binding IntDataDisplay.MagnetometerOrientationZValue}"/>
                
            </StackPanel>
            <DockPanel Margin="5" HorizontalAlignment="Left" VerticalAlignment="Bottom" LastChildFill="True">
                <Button Content="Left" DockPanel.Dock="Left" IsEnabled="{Binding MoveLeftButton.Enabled, UpdateSourceTrigger=PropertyChanged}" Command="{Binding MoveLeftButton.Command}"/>
                <Button Content="Right" DockPanel.Dock="Right" IsEnabled="{Binding MoveRightButton.Enabled, UpdateSourceTrigger=PropertyChanged}" Command="{Binding MoveRightButton.Command}"/>
                <Button Content ="Forward" DockPanel.Dock="Top" IsEnabled="{Binding MoveForwardButton.Enabled, UpdateSourceTrigger=PropertyChanged}" Command="{Binding MoveForwardButton.Command}"/>
                <Button Content ="Backwards" DockPanel.Dock="Bottom" IsEnabled="{Binding MoveBackwardsButton.Enabled, UpdateSourceTrigger=PropertyChanged}" Command="{Binding MoveBackwardsButton.Command}"/>
                <Button Content="Stop" IsEnabled="{Binding MoveStopButton.Enabled, UpdateSourceTrigger=PropertyChanged}" Command="{Binding MoveStopButton.Command}"/>
            </DockPanel>
            <View:WorldCanvas MovementMap="{Binding MovementMap}"/>
        </StackPanel>
    </Grid>
</Window>
